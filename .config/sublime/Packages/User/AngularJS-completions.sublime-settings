{
    "js_completions": [
        ["angular\tAngularJS", "angular"],
        ["$animate\tAngularJS", "\\$animate"],
        ["$animateProvider\tAngularJS", "\\$animateProvider"],
        ["$cacheFactory\tAngularJS", "\\$cacheFactory(${1:cacheId}${2:, ${3:options}})"],
        ["$compile\tAngularJS", "\\$compile(${1:element}, ${2:transclude}, ${3:maxPriority})"],
        ["$compileProvider\tAngularJS", "\\$compileProvider"],
        ["$controller\tAngularJS", "\\$controller(${1:constructor}, ${2:locals})"],
        ["$controllerProvider\tAngularJS", "\\$controllerProvider"],
        ["$exceptionHandler\tAngularJS", "\\$exceptionHandler(${1:exception}${2:, ${3:cause}})"],
        ["$exceptionHandlerProvider\tAngularJS", "\\$exceptionHandlerProvider"],
        ["$filter\tAngularJS", "\\$filter(${1:name})"],
        ["$filterProvider\tAngularJS", "\\$filterProvider"],
        ["$http\tAngularJS", "\\$http"],
        ["$httpBackend\tAngularJS", "\\$httpBackend"],
        ["$injector\tAngularJS", "\\$injector"],
        ["$interpolate\tAngularJS", "\\$interpolate(${1:text}${2:, ${3:mustHaveExpression}${4:, ${5:trustedContext}}})"],
        ["$interpolateProvider\tAngularJS", "\\$interpolateProvider"],
        ["$interval\tAngularJS", "\\$interval"],
        ["$locale\tAngularJS", "\\$locale"],
        ["$location\tAngularJS", "\\$location"],
        ["$locationProvider\tAngularJS", "\\$locationProvider"],
        ["$log\tAngularJS", "\\$log"],
        ["$logProvider\tAngularJS", "\\$logProvider"],
        ["$parse\tAngularJS", "\\$parse(${1:expression})"],
        ["$parseProvider\tAngularJS", "\\$parseProvider"],
        ["$provide\tAngularJS", "\\$provide"],
        ["$q\tAngularJS", "\\$q"],
        ["$rootElement\tAngularJS", "\\$rootElement"],
        ["$rootScope\tAngularJS", "\\$rootScope"],
        ["$rootScopeProvider\tAngularJS", "\\$rootScopeProvider"],
        ["$sce\tAngularJS", "\\$sce"],
        ["$sceDelegate\tAngularJS", "\\$sceDelegate"],
        ["$sceDelegateProvider\tAngularJS", "\\$sceDelegateProvider"],
        ["$sceProvider\tAngularJS", "\\$sceProvider"],
        ["$scope\tAngularJS", "\\$scope"],
        ["$templateCache\tAngularJS", "\\$templateCache"],
        ["$timeout\tAngularJS", "\\$timeout"],
        ["$window\tAngularJS", "\\$window"],

        ["$cookies\tAngularJS", "\\$cookies"],
        ["$cookieStore\tAngularJS", "\\$cookieStore"],

        ["$resource\tAngularJS", "\\$resource(${1:url}${2:, ${3:paramDefaults}${4:, ${5:actions}}})"],

        ["$route\tAngularJS", "\\$route"],
        ["$routeParams\tAngularJS", "\\$routeParams"],
        ["$routeProvider\tAngularJS", "\\$routeProvider"],

        ["$sanitize\tAngularJS", "\\$sanitize(${1:html})"],

        ["$swipe\tAngularJS", "\\$swipe"],

        ["verbose_$http\tAngularJS", "\\$http('${1:GET|POST|PUT|DELETE}', ${2:url}${3:, ${4:post}}, ${5:function(status, response){\n\t${6:// success}\n}}${7:, function(status, response){\n\t${8:// error}\n}});"],
        ["verbose_$filter\tAngularJS", "\\$filter('${1:currency|date|filter|json|limitTo|linky|lowercase|number|orderBy|uppercase}')(${2:array}${3:, ${4:expression}});"],
        ["verbose_$interval\tAngularJS", "\\$interval(${1:fn}${2:, ${3:delay}${4:, ${5:count}}${6:, ${7:invokeApply}}})"],
        ["verbose_$timeout\tAngularJS", "\\$timeout(${1:function()\\{\n\t$2\n\\}}, ${3:delay});"],
        ["verbose_directive\tAngularJS", "directive('$1', [${3:'$4', }function($4){\n\t${5:// Runs during compile}\n\treturn {\n\t\t// name: '',\n\t\t// priority: 1,\n\t\t// terminal: true,\n\t\t// scope: {}, // {} = isolate, true = child, false/undefined = no change\n\t\t// controller: function(\\$scope, \\$element, \\$attrs, \\$transclude) {},\n\t\t// require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements\n\t\t// restrict: 'A', // E = Element, A = Attribute, C = Class, M = Comment\n\t\t// template: '',\n\t\t// templateUrl: '',\n\t\t// replace: true,\n\t\t// transclude: true,\n\t\t// compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),\n\t\tlink: function(\\$scope, iElm, iAttrs, controller) {\n\t\t\t$0\n\t\t}\n\t};\n}]);"],
        ["verbose_module\tAngularJS", "/**\n* $1 Module\n*\n* ${2:Description}\n*/\nangular.module('$1', [$3]).$0"],

        ["config\tAngularJS", "config([${1:'$2',}function($2) {\n\t$3\n}])"],
        ["constant\tAngularJS", "constant('${1:name}', ${2:value})"],
        ["controller\tAngularJS", "controller('${1:name}', function($2){\n\t$3\n})"],
        ["factory\tAngularJS", "factory('${1:name}', [${2:'$3', }function($3){\n\treturn function ${4:name}(){\n\t\t$5\n\t};\n}])"],
        ["run\tAngularJS", "run('${1:name}', [${2:'$3', }function($3){\n\t$4\n}])"],
        ["service\tAngularJS", "service('${1:name}', [${2:'$3', }function($3){\n\t$4\n}])"],
        ["value\tAngularJS", "value('${1:name}', ${2:value})"]
    ],
    "angular": [
        ["bind\tAngularJS", "bind(${1:self}, ${2:fn}, ${3:args})"],
        ["bootstrap\tAngularJS", "bootstrap(${1:element}${2:, ${3:modules}})"],
        ["copy\tAngularJS", "copy(${1:source}${2:, ${3:destination}})"],
        ["element\tAngularJS", "element(${1:element});"],
        ["equals\tAngularJS", "equals(${1:object1}, ${2:object2});"],
        ["extend\tAngularJS", "extend(${1:destinationObject}, ${2:sourceObject})"],
        ["forEach\tAngularJS", "forEach(${1:values}, function(${2:value}, ${3:key}){\n\t$0\n});"],
        ["fromJson\tAngularJS", "fromJson(${1:json})"],
        ["identity\tAngularJS", "identity()"],
        ["injector\tAngularJS", "injector(${1:modules})"],
        ["isArray\tAngularJS", "isArray(${1:value})"],
        ["isDate\tAngularJS", "isDate(${1:value})"],
        ["isDefined\tAngularJS", "isDefined(${1:value})"],
        ["isElement\tAngularJS", "isElement(${1:value})"],
        ["isFunction\tAngularJS", "isFunction(${1:value})"],
        ["isNumber\tAngularJS", "isNumber(${1:value})"],
        ["isObject\tAngularJS", "isObject(${1:value})"],
        ["isString\tAngularJS", "isString(${1:value})"],
        ["isUndefined\tAngularJS", "isUndefined(${1:value})"],
        ["lowercase\tAngularJS", "lowercase(${1:string});"],
        ["mock\tAngularJS", "mock"],
        ["module\tAngularJS", "module('$1', [$2])"],
        ["noop\tAngularJS", "noop"],
        ["toJson\tAngularJS", "toJson(${1})"],
        ["uppercase\tAngularJS", "uppercase(${1:string});"],
        ["version\tAngularJS", "version"]
    ],
    "$animate": [
        ["addClass\tAngularJS", "addClass(${1:element}, ${2:className}, ${3:done})"],
        ["enter\tAngularJS", "enter(${1:element}, ${2:parent}, ${3:after}, ${4:done})"],
        ["leave\tAngularJS", "leave(${1:element}, ${2:done})"],
        ["move\tAngularJS", "move(${1:element}, ${2:parent}, ${3:after}, ${4:done})"],
        ["removeClass\tAngularJS", "removeClass(${1:element}, ${2:className}, ${3:done})"]
    ],
    "$animateProvider": [
        ["classNameFilter\tAngularJS", "classNameFilter(${1:expression})"],
        ["register\tAngularJS", "register(${1:name}, ${2:factory})"]
    ],
    "$compileProvider": [
        ["aHrefSanitizationWhitelist\tAngularJS", "aHrefSanitizationWhitelist(${1:regexp})"],
        ["directive\tAngularJS", "directive(${1:name}${2:, ${3:directiveFactory}})"],
        ["imgSrcSanitizationWhitelist\tAngularJS", "imgSrcSanitizationWhitelist(${1:regexp})"]
    ],
    "$controllerProvider": [
        ["register\tAngularJS", "register(${1:name}${2:, ${3:constructor}})"]
    ],
    "$exceptionHandlerProvider": [
        ["mode\tAngularJS (M)", "mode(${1:mode})"]
    ],
    "$filterProvider": [
        ["register\tAngularJS", "register(${1:name}, ${2:fn})"]
    ],
    "$http": [
        ["delete\tAngularJS", "delete(${1:url}${2:, ${3:config}})"],
        ["get\tAngularJS", "get(${1:url}${2:, ${3:config}})"],
        ["head\tAngularJS", "head(${1:url}${2:, ${3:config}})"],
        ["jsonp\tAngularJS", "jsonp(${1:url}${2:, ${3:config}})"],
        ["post\tAngularJS", "post(${1:url}, ${2:data}${3:, ${4:config}})"],
        ["put\tAngularJS", "put(${1:url}, ${2:data}${3:, ${4:config}})"],
        ["defaults\tAngularJS", "defaults"],
        ["pendingRequests\tAngularJS", "pendingRequests"]
    ],
    "$httpBackend": [
        ["expect\tAngularJS (M)", "expect(${1:method}, ${2:url}${3:, ${4:data}${5:, ${6:headers}}})"],
        ["expectDELETE\tAngularJS (M)", "expectDELETE(${1:url}${2:, ${3:headers}})"],
        ["expectGET\tAngularJS (M)", "expectGET(${1:url}${2:, ${3:headers}})"],
        ["expectHEAD\tAngularJS (M)", "expectHEAD(${1:url}${2:, ${3:headers}})"],
        ["expectJSONP\tAngularJS (M)", "expectJSONP(url)"],
        ["expectPATCH\tAngularJS (M)", "expectPATCH(${1:url}${2:, ${3:data}${4:, ${5:headers}}})"],
        ["expectPOST\tAngularJS (M)", "expectPOST(${1:url}${2:, ${3:data}${4:, ${5:headers}}})"],
        ["expectPUT\tAngularJS (M)", "expectPUT(${1:url}${2:, ${3:data}${4:, ${5:headers}}})"],
        ["flush\tAngularJS (M)", "flush(${1:count})"],
        ["resetExpectations\tAngularJS (M)", "resetExpectations()"],
        ["verifyNoOutstandingExpectation\tAngularJS (M)", "verifyNoOutstandingExpectation()"],
        ["verifyNoOutstandingRequest\tAngularJS (M)", "verifyNoOutstandingRequest()"],
        ["when\tAngularJS (M/E2E)", "when(${1:method}, ${2:url}${3:, ${4:data}${5:, ${6:headers}}})"],
        ["whenDELETE\tAngularJS (M/E2E)", "whenDELETE(${1:url}${2:, ${3:headers}})"],
        ["whenGET\tAngularJS (M/E2E)", "whenGET(${1:url}${2:, ${3:headers}})"],
        ["whenHEAD\tAngularJS (M/E2E)", "whenHEAD(${1:url}${2:, ${3:headers}})"],
        ["whenJSONP\tAngularJS (M/E2E)", "whenJSONP(url)"],
        ["whenPOST\tAngularJS (M/E2E)", "whenPOST(${1:url}${2:, ${3:data}${4:, ${5:headers}}})"],
        ["whenPUT\tAngularJS (M/E2E)", "whenPUT(${1:url}${2:, ${3:data}${4:, ${5:headers}}})"]
    ],
    "$injector": [
        ["annotate\tAngularJS", "annotate(${1:fn})"],
        ["get\tAngularJS", "get(${1:name})"],
        ["has\tAngularJS", "has(${1:name})"],
        ["instantiate\tAngularJS", "instantiate(${1:Type}${2:, ${3:locals}})"],
        ["invoke\tAngularJS", "invoke(${1:fn}${2:, ${3:self}${4:, ${5:locals}}})"]
    ],
    "$interpolateProvider": [
        ["endSymbol\tAngularJS", "endSymbol(${1:value})"],
        ["startSymbol\tAngularJS", "startSymbol(${1:value})"]
    ],
    "$interval": [
        ["cancel\tAngularJS", "cancel(${1:promise})"],
        ["flush\tAngularJS (M)", "flush(${1:millis})"]
    ],
    "$locale": [
        ["id\tAngularJS", "id"]
    ],
    "$location": [
        ["absUrl\tAngularJS", "absUrl()"],
        ["hash\tAngularJS", "hash(${1:hash})"],
        ["host\tAngularJS", "host()"],
        ["path\tAngularJS", "path(${1:path})"],
        ["port\tAngularJS", "port()"],
        ["protocol\tAngularJS", "protocol()"],
        ["replace\tAngularJS", "replace()"],
        ["search\tAngularJS", "search(${1:search}${2:, ${3:paramValue}})"],
        ["url\tAngularJS", "url(${1:${2:url}${3:, ${4:replace}}})"]
    ],
    "$locationProvider": [
        ["hashPrefix\tAngularJS", "hashPrefix(${1:prefix})"],
        ["html5Mode\tAngularJS", "html5Mode(${1:true})"]
    ],
    "$log": [
        ["debug\tAngularJS", "debug()"],
        ["error\tAngularJS", "error()"],
        ["info\tAngularJS", "info()"],
        ["log\tAngularJS", "log()"],
        ["warn\tAngularJS", "warn()"],
        ["assertEmpty\tAngularJS (M)", "assertEmpty()"],
        ["reset\tAngularJS (M)", "reset()"]
    ],
    "$logProvider": [
        ["debugEnabled\tAngularJS", "debugEnabled(${1:true})"]
    ],
    "$parseProvider": [
        ["logPromiseWarnings\tAngularJS", "logPromiseWarnings(${1:false})"],
        ["unwrapPromises\tAngularJS", "unwrapPromises(${1:true})"]
    ],
    "$provide": [
        ["constant\tAngularJS", "constant(${1:name}, ${2:value})"],
        ["decorator\tAngularJS", "decorator(${1:name}, ['\\$delegate', function(\\$delegate){\n\t$2\n\treturn \\$delegate\n}])"],
        ["factory\tAngularJS", "factory(${1:name}, [${2:'$3', }function($3){\n\treturn function ${4:name}(){\n\t\t$5\n\t};\n}])"],
        ["provider\tAngularJS", "provider(${1:name}, ${2:provider})"],
        ["service\tAngularJS", "service(${1:name}, ${2:constructor})"],
        ["value\tAngularJS", "value(${1:name}, ${2:value})"]

    ],
    "$q": [
        ["all\tAngularJS", "all(${1:promises})"],
        ["defer\tAngularJS", "defer()"],
        ["reject\tAngularJS", "reject(${1:reason})"],
        ["when\tAngularJS", "when(${1:value})"]
    ],
    "$rootScope": "_scopes",
    "$scope": "_scopes",
    "_scopes": [
        ["$apply\tAngularJS", "\\$apply(${1:exp})"],
        ["$broadcast\tAngularJS", "\\$broadcast(${1:name}, ${2:args})"],
        ["$destroy\tAngularJS", "\\$destroy()"],
        ["$digest\tAngularJS", "\\$digest()"],
        ["$emit\tAngularJS", "\\$emit(${1:name}, ${2:args})"],
        ["$eval\tAngularJS", "\\$eval(${1:${2:expression}${3:, ${4:locals}}})"],
        ["$evalAsync\tAngularJS", "\\$evalAsync(${1:expression})"],
        ["$new\tAngularJS", "\\$new(${1:isolate})"],
        ["$on\tAngularJS", "\\$on('${1:name}', ${2:function(){$3}});"],
        ["$parent\tAngularJS", "\\$parent."],
        ["$root\tAngularJS", "\\$root."],
        ["$watch\tAngularJS", "\\$watch('${1:watchExpression}', function(newValue, oldValue, scope) {\n\t$2\n}${3:, ${4:objectEquality}});"],
        // ["$watch\tAngularJS", "\\$watch(${1:watchExpression}${2:, ${3:listener}${4:, ${5:objectEquality}}})"],
        ["$watchCollection\tAngularJS", "\\$watchCollection(${1:obj}, function(newCollection, oldCollection, scope) {\n\t$2\n});"],
        ["$id\tAngularJS", "\\$id"]
    ],
    "$rootScopeProvider": [
        ["digestTtl\tAngularJS", "digestTtl(${1:limit})"]
    ],
    "$sce": [
        ["getTrusted\tAngularJS", "getTrusted(${1:type}, ${2:maybeTrusted})"],
        ["getTrustedCss\tAngularJS", "getTrustedCss(${1:value})"],
        ["getTrustedHtml\tAngularJS", "getTrustedHtml(${1:value})"],
        ["getTrustedJs\tAngularJS", "getTrustedJs(${1:value})"],
        ["getTrustedResourceUrl\tAngularJS", "getTrustedResourceUrl(${1:value})"],
        ["getTrustedUrl\tAngularJS", "getTrustedUrl(${1:value})"],
        ["parse\tAngularJS", "parse(${1:type}, ${2:expression})"],
        ["parseAsCss\tAngularJS", "parseAsCss(${1:expression})"],
        ["parseAsHtml\tAngularJS", "parseAsHtml(${1:expression})"],
        ["parseAsJs\tAngularJS", "parseAsJs(${1:expression})"],
        ["parseAsResourceUrl\tAngularJS", "parseAsResourceUrl(${1:expression})"],
        ["parseAsUrl\tAngularJS", "parseAsUrl(${1:expression})"],
        ["trustAs\tAngularJS", "trustAs(${1:type}, ${2:value})"],
        ["trustAsHtml\tAngularJS", "trustAsHtml(${1:value})"],
        ["trustAsJs\tAngularJS", "trustAsJs(${1:value})"],
        ["trustAsResourceUrl\tAngularJS", "trustAsResourceUrl(${1:value})"],
        ["trustAsUrl\tAngularJS", "trustAsUrl(${1:value})"],
        ["isEnabled\tAngularJS", "isEnabled()"]
    ],
    "$sceDelegate": [
        ["getTrusted\tAngularJS", "getTrusted(${1:type}, ${2:maybeTrusted})"],
        ["trustAs\tAngularJS", "trustAs(${1:type}, ${2:value})"],
        ["valueOf\tAngularJS", "valueOf(${1:value})"]
    ],
    "$sceDelegateProvider": [
        ["resourceUrlBlacklist\tAngularJS", "resourceUrlBlacklist(${1:blacklist})"],
        ["resourceUrlWhitelist\tAngularJS", "resourceUrlWhitelist(${1:whitelist})"]
    ],
    "$sceProvider": [
        ["enabled\tAngularJS", "enabled(${1:value})"]
    ],
    "$timeout": [
        ["cancel\tAngularJS", "cancel(${1:promise})"],
        ["flush\tAngularJS (M)", "flush(${1:delay})"]
    ],
    "$cookieStore": [
        ["get\tAngularJS", "get(${1:key})"],
        ["put\tAngularJS", "put(${1:key}, ${2:value})"],
        ["remove\tAngularJS", "remove(${1:key})"]
    ],
    "$route": [
        ["reload\tAngularJS", "reload()"],
        ["current\tAngularJS", "current"],
        ["routes\tAngularJS", "routes"]
    ],
    "$routeProvider": [
        ["otherwise\tAngularJS", "otherwise(${1:params})"],
        ["when\tAngularJS", "when(${1:path}, ${2:route})"]
    ],
    "$swipe": [
        ["bind\tAngularJS", "bind(${1:element})"]
    ],
    "mock": [
        ["dump\tAngularJS", "dump(${1:object})"],
        ["module\tAngularJS", "module(${1:fns})"]
    ],
    "events": [
        ["$locationChangeStart\tAngularJS (E)", "\\$locationChangeStart"],
        ["$locationChangeSuccess\tAngularJS (E)", "\\$locationChangeSuccess"],
        ["$destroy\tAngularJS (E)", "\\$destroy"],
        ["$includeContentLoaded\tAngularJS (E)", "\\$includeContentLoaded"],
        ["$includeContentRequested\tAngularJS (E)", "\\$includeContentRequested"],
        ["$routeChangeError\tAngularJS (E)", "\\$routeChangeError"],
        ["$routeChangeStart\tAngularJS (E)", "\\$routeChangeStart"],
        ["$routeChangeSuccess\tAngularJS (E)", "\\$routeChangeSuccess"],
        ["$routeUpdate\tAngularJS (E)", "\\$routeUpdate"],
        ["$viewContentLoaded\tAngularJS (E)", "\\$viewContentLoaded"]
    ],
    "attrs": [
        ["$addClass\tAngularJS", "\\$addClass(${1:classVal})"],
        ["$observe\tAngularJS", "\\$observe(${1:key}, ${2:fn})"],
        ["$removeClass\tAngularJS", "\\$removeClass(${1:classVal})"],
        ["$set\tAngularJS", "\\$set(${1:name}, ${2:value})"],
        ["$updateClass\tAngularJS", "\\$updateClass(newClasses, oldClasses)"],
        ["$attr\tAngularJS", "\\$attr"]
    ]
}
